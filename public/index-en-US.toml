[input]
minimum_indexed_substring_length = 2
title_boost = "Ridiculous"
stemming = "English"

[[input.files]]
title = "Dynamic Embeddable Convo"
url = "/docs/Convo-Embeds/dynamic-embeddable-convo"
contents = "Dynamic Embeddable Convo\nIntroduction\nYou can utilize Convo to create a dynamic comments section on any page/section of a website with a fully built UI provided by Convo.
\nDynamic Embeddable Convos are useful in scenarios when you have thousands of pages in your website or serve dynamically generated pages requiring one or multiple comment boxes on each one of those pages.\nRefer here, if you are looking to build a Custom UI instead of using an Iframe.\nIntegration\nDynamic Embeddable Convos use a combination of the Site URL and Custom Thread ID to uniquely identify a comments section without having to create one through Convo's Interface.\nHere are the details on the required query parameters for a dynamic embeddable convo,\nurl: This is the url encoded (encodeURIComponent()) full website link. This should ideally contain the url without any query parameters or internal links (i.e origin+pathname). You can use new URL(\"<your-site-url>\") to clean your url and get the origin and pathname values easily.\nthreadId: This is a unique identifier for the comments page on your site, you can set unique values for this key to have multiple threads on the same url. ThreadId is your own unique identifier, doesn't have to come from Convo. Could be a Contract Address, Nft Id etc\nExample,\nNow you can use this snippet on any website by simply inserting this HTML wherever you want the comments page to appear.\nCustomization Options\n| Query Param 	| Description 	| Default Value 	|
\n|-	|:-	|:-:	|
\n| theme 	|     Set the default theme of the Convo. dark or light 	| dark 	|
\n| height 	|     Set the default height of the Chat Element.	| 300 |\nComments\n"
filetype = "PlainText"
[[input.files]]
title = "Embed a Convo"
url = "/docs/Convo-Embeds/embed-a-comment"
contents = "Embeddable Comment\nIntroduction\nAny Comment on Convo can be embedded in a Website just like a tweet.\nIntegration\nStart by simply clicking the three dot menu on a comment and copying the embed code for any Comment. The result should be in a format like this,\nNow you can use this link on any website by simply using the below HTML wherever you want the comment to be.\nUsage,\nExample\nComments\n"
filetype = "PlainText"
[[input.files]]
title = "Next.js Example"
url = "/examples/nextjs"
contents = ""
filetype = "PlainText"
[[input.files]]
title = "Conviction Voting"
url = "/learn/conviction-voting"
contents = "Conviction Voting\nModeration is a crucial part of the system to ensure the dialogue between participants is effective. Moderation of a dialogue will always be in the hands of the community where a random subset of N participants will receive the request to show their conviction towards a comment staged for removal. If the overall conviction towards a certain sentiment (binary or probabilistic) reaches the threshold, the comment will be removed.\nThe longer you hold a preference for a certain comment, the more that bucket fills up with your conviction. Your conviction grows according to a half life decay curve, giving more weight to that preference over time, up to a certain limit. If you decide to switch your preference to a new bucket, your conviction drains out of the previous direction according to the decay function, as if there were a small hole in the bottom of each bucket. By using decay curves to define the accumulation and reduction of conviction, we introduce temporal dynamics into the system, moving us closer to how systems work in nature. By dampening these abrupt movements, we eliminate the need for arbitrary token lock periods for governance and avoid last minute directional swings.\nMore resources to learn about Conviction Voting,\nhttps://medium.com/giveth/conviction-voting-a-novel-continuous-decision-making-alternative-to-governance-aa746cfb9475/\nhttps://hackmd.io/@EtCgawsxS2mC6-Q0rCqhAw/rJMvfgOv4?type=view/\nComments\n"
filetype = "PlainText"
[[input.files]]
title = "Convo API"
url = "/docs/Convo-API/api-docs"
contents = "Convo API\nAPI Details\nEarly-access API Endpoint : https://theconvo.space/api/\nAPI Playground : https://playground.theconvo.space/\nOpenAPI 3 Config : https://github.com/anudit/convodocs/tree/main/public/Convo.yaml/\nStep 1 - User Authentication\nAuthenticating a User\nAuth Route : /auth\nFull Endpoint : https://theconvo.space/api/auth?apikey=CONVO\n| Body Param 	| Description 	|
\n|-	|:-	|
\n| signerAddress 	| The address of the account to authenticate. 	|
\n| signature 	|  Ethereum signature of data using the above signerAddress	|
\n| timestamp 	|  Timestamp of the instant the signature request was fired.	|
\n| chain 	| ethereum	|\ndata Format = I allow this site to access my data on The Convo Space using the account <signerAddress>. Timestamp:<timestamp>\nExample, data = 'I allow this site to access my data on The Convo Space using the account 0x707aC3937A9B31C225D8C240F5917Be97cab9F20. Timestamp:1623254904621'\nSend a POST request to the endpoint with the following example body,\n| Body Param 	| Description 	|
\n|-	|:-	|
\n| signerAddress 	| The address of the account to authenticate. 	|
\n| signature 	|  NEAR signature of data using the above signerAddress	|
\n| accountId 	|  Your NEAR Account Id	|
\n| timestamp 	|  Timestamp of the instant the signature request was fired.	|
\n| chain 	| near	|\ndata Format = I allow this site to access my data on The Convo Space using the account <accountId>. Timestamp:<timestamp>\nExample, data = 'I allow this site to access my data on The Convo Space using the account convo.testnet. Timestamp:1623254904621'\nSend a POST request to the endpoint with the following example body,\n| Body Param 	| Description 	|
\n|-	|:-	|
\n| signerAddress 	| The address of the account to authenticate. 	|
\n| signature 	|  CompositeSignature of data 	|
\n| timestamp 	|  Timestamp of the instant the signature request was fired.	|
\n| chain 	| flow	|\ndata Format = I allow this site to access my data on The Convo Space using the account <accountId>. Timestamp:<timestamp>\nExample, data = 'I allow this site to access my data on The Convo Space using the account 0x4268f655cacd5436. Timestamp:1634402654144'\nResponse\n| Response Param 	| Description 	|
\n|:-	|:-	|
\n| success 	| Boolean, status of the request.	|
\n| message 	| Contains either the JWT auth token if success==true or an error message success==false |\nValidating Authentication\nAuth Route : /validateAuth\nFull Endpoint : https://theconvo.space/api/validateAuth?apikey=CONVO\nSend a POST request to the endpoint with the following example body,\n| Body Param 	| Description 	|
\n|-	|:-	|
\n| signerAddress 	| The address of the account to authenticate. 	|
\n| token 	|  The JWT Authentication Token to validate.	|\nSend a POST request to the endpoint with the following example body,\n| Body Param 	| Description 	|
\n|-	|:-	|
\n| signerAddress 	| The NEAR accountId of user. 	|
\n| token 	|  The JWT Authentication Token to validate.	|\nSend a POST request to the endpoint with the following example body,\n| Body Param 	| Description 	|
\n|-	|:-	|
\n| signerAddress 	| The address of the account to authenticate. 	|
\n| token 	|  The JWT Authentication Token to validate.	|\nResponse\n| Response Param 	| Description 	|
\n|:-	|:-	|
\n| success 	| Boolean, status of the request.	|
\n| message 	| If success==true then \"Valid Auth Token\" else returns the error message |\nPossible Error Messages,\n200: Invalid Auth Token.\n400: Internal JWT Auth Error Message.\n400: signerAddress or token or timestamp is missing/invalid.\n500: Internal Error.\nStep 2 - Querying Data\nQuerying a Comment\nBy CommentId : /comment?commentId=fJPU8mZiQwVXV6K1xXlw\nQuerying Comments\nBy ThreadId : /comments?threadId=fJPU8mZiQwVXV6K1xXlw\nBy URL : /comments?url=https%3A%2F%2Fgoogle.com%2F\nBy ThreadId and URL : /comments?threadId=fJPU8mZiQwVXV6K1xXlw&url=https%3A%2F%2Fdeepdao.io%2F\nQuerying Threads\n/threads endpoint gets the metadata for any ThreadId. This will soon be the place for adding permissions to conversations like moderators, url & token gating and many more.\nAll Threads: /threads\nBy ThreadId : /threads?threadId=fJPU8mZiQwVXV6K1xXlw\nBy URL : /threads?url=https%3A%2F%2Fgoogle.com%2F\nResponse Example\nYou can pagintate by using page and pageSize query params.\nYou can reorder the comments fetching the latest first using latestFirst query param.\nStep 3 - Creating a comment\nRoute : /comments\nFull Endpoint : https://theconvo.space/api/comments?apikey=CONVO\nSend a POST request to the endpoint with the following request schema,\nResponse\nYou can add a replyTo body parameter with a valid comment _id value to set that comment as a reply to any specific comment.\nPossible Response Error Messages,\n400: Invalid/Incomplete params\n503: Invalid Auth\n500: Internal Error.\nStep 4 - Deleting a comment\nRoute : /comments\nFull Endpoint : https://theconvo.space/api/comments?apikey=CONVO\nSend a DELETE request to the endpoint with the following request schema,\nResponse\nPossible Response Error Messages,\n400: Invalid/Incomplete params\n503: Invalid Auth\n500: Internal Error.\nLikes and Dislikes\nRoute : /vote\nFull Endpoint : https://theconvo.space/api/vote?apikey=CONVO\nSend a POST request to the endpoint with the following body schema,\nThe type field supports the folowing values,\ntoggleUpvote\ntoggleDownvote\nEg,\nResponse\nPossible Response Error Messages,\n400: Invalid/Incomplete params\n404: Invalid Request Method\n503: Invalid Auth\n500: Internal Error.\nComments\n"
filetype = "PlainText"
[[input.files]]
title = "Standards"
url = "/docs/Convo-API/standards"
contents = "Standards\nIntroduction\nHere we document the cross-platform standards for setting up your url & threadid schema for storing and querying conversational data.\nNFTs\nURL: Your Website Address like https://huddln.io/\nThreadId: <tokenContractAddress>:<tokenId>:<chainId>\nComments\n"
filetype = "PlainText"
[[input.files]]
title = "Trust Score"
url = "/docs/Convo-API/trust-score"
contents = "TrustScore\nIntroduction\nTrustScore aggregates multiple on/off-chain sources of reputation into an overall social graph where each source counts towards some points in building the overall TrustScore for any Ethereum Address. This score is continuously evolving. As more platforms get integrated, the weights and the score will update too.\nCurrent Integrations and Score Weightage.\n| Integration         	| Factors and Score                                                                                                                                                                        	|\n|---------------------	|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	|\n| Proof of Humanity   	| 8 Points for Verification                                                                                                                                                                	|\n| Uniswap Sybil       	| 10 Points for Verification                                                                                                                                                               	|\n| BrightId            	| 37 Points for Verification                                                                                                                                                               	|\n| POAP                	| 1 Point for Each POAP Received                                                                                                                                                           	|\n| ENS                 	| 10 Points for Reverse Resolution to your Address.                                                                                                                                        	|\n| Polygon Ecosystem             	| Relative Score out of 100 based on, - Number of Transactions - Net Volume Transacted  - Retention                                                                                                                                                           	|\n| Idena               	| 1 Point for Verification                                                                                                                                                                 	|\n| Celo Verified Attestations             	| 1 Point for each valid Attestation                                                                                                                                                              	|\n| Gitcoin             	| 10 Points for funding a Grant.                                                                                                                                                           	|\n| CryptoScamDB        	| -20 Points for being flagged                                                                                                                                                             	|\n| Unstoppable Domains 	| 10 Points for Reverse Resolution to your Address.                                                                                                                                        	|\n| DeepDAO             	| 1 Point for Each DAO you are a member of. (Deeper Integration coming soon.)                                                                                                              	|\n| RabbitHole          	| Points equal to the Levels you cross on RabbitHole.                                                                                                                                     	|\n| Mirror              	| 10 Points for being a writer on Mirror                                                                                                                                                   	|\n| Coinvise            	| - Tokens Created(a) : (a)^0.5 Points - NFTs Created(b) : (b)^0.5 Points  - Total NFTs Sold(c): c Points - Airdrops Sent(d): d Points - Multisends(e): e Points - Liquidity Pools Created(f): f Points 	|\n| Showtime          	| Followers, Following 	|\n| Rarible             	| NFTs Sold, Average Sale Value, Followers, Following	|\n| Foundation          	| NFTs Sold, Average Sale Value, Followers, Following |\n| Zora                	| NFTs Sold, Average Sale Value                                                                                                                                                            	|\n| Async Art           	| NFTs Sold, Average Sale Value                                                                                                                                                            	|\n| KnownOrigin          	| NFTs Sold, Average Sale Value                                                                                                                                                            	|\n| SuperRare     | NFTs Sold, Average Sale Value, Followers, Following |\n| Boardroom     | Number of Governance Proposals Accepted|\n| Coordinape    | Number of teammates. |\n| Cyberconnect  | - Followers - Following  - Social  - Display Name 	|\nIntegration\nQuerying TrustScore\nAPI Request format,\nExample 1,\nResponse,\nExample 2,\nResponse,\nVerifying Response Signature\nComments\n"
filetype = "PlainText"
[[input.files]]
title = "Websocket"
url = "/docs/Convo-API/websocket"
contents = "WebSocket\nIntroduction\nWebsockets allow you to subscribe to a threadId and receive updates for new messsages. Here is how you can add them to your application.\nStep 1 - Install Dependencies.\nStep 2 - Setup your code.\nLet's create a file that'll have our React hook named Ably.js.\nStep 3 - Subscribe to a Channel.\nComments\n"
filetype = "PlainText"
[[input.files]]
title = "Convo x Extension"
url = "/docs/Convo-Extensions/browser-extension"
contents = "Convo x Browsers\nIntroduction\nConvo is available as a Browser Extension that gives you a simple browser button to spin up a Convo on any website.\nInstallation\nGet it on Chrome Webstore\nGet it on Edge Add-ons\nGet it on Mozilla Addons : 🏗️ Coming Soon\nComments\n"
filetype = "PlainText"
[[input.files]]
title = "Convo SDK"
url = "/docs/Convo-SDK/sdk-docs"
contents = "Convo SDK\nSDK containing all the functions you'll need to build on theconvo.space\n🌲 Tree Shaking Supported ✔️
\n🆓 Side Effect Free ✔️
\n🪨 Fully TypeScript Compatible ✔️
\n🤏 Just 8.37kB Minified (1.85kB Minified+GZipped) \nJump to Sample Projects
\nTry it Out\nInstallation\nNodeJs\nBrowser\nSetup\nGenerate and Copy an API key from https://theconvo.space/dashboard/developer/\nImport Convo in your own project.\nSetup an new instance of Convo using\nReplace apikey with your newly generated key.\nAuth\nAuthenticate Session\nExample Usage,\nValidate Authentication\nExample,\nGet Signature Data\nExample,\nComments\nCreate a Comment\nExample,\nDelete a Comment\nExample,\nToggle Upvote\nExample,\nToggle Downvote\nExample,\nQuery Comments\nExamples,\nThreads\nCreate a new Thread (Group)\nExamples,\nDelete a Thread (Group)\nExample,\nQuery a Thread (Group)\nExample,\nAdd Members to a Thread (Group)\nExample,\nRemove Members from a Thread (Group)\nExample,\nAdd Moderators to a Thread (Group)\nExample,\nRemove Moderators from a Thread (Group)\nExample,\nUpdate title of a Thread (Group)\nExample,\nUpdate description of a Thread (Group)\nExample,\nToggle Public Read Access of a Thread (Group)\nExample,\nToggle Public Write Access of a Thread (Group)\nExample,\nIdentity\nGet TrustScore for Address\nExample,\nUtility\nLog Internal Config\nExample,\nSample Projects\nNextJS/React Sample Project
\nCode | Demo - convosdk-examples-nextjs.vercel.app\nBrowser (Vanilla JS) Sample Project
\nCode | Demo - convosdk-examples-browser.vercel.app\nComments\n"
filetype = "PlainText"
[[input.files]]
title = "Convo x Decentraland"
url = "/docs/Convo-Extensions/convo-on-decentraland"
contents = "Convo x Decentraland\nIntroduction\nWith Convo you can build experiances that continue beyond a single interface.\nConversations liked to any Web Element can continue in the 3D Metaverse at Decentraland.\nCheck out a Quick Demo to see this in the works,\nTry it out here\nPlease refer to the sample project here.\nComments\n"
filetype = "PlainText"
[[input.files]]
title = "BrightID"
url = "/docs/Convo-Extensions/brightid"
contents = "Convo x BrightID\nIntroduction\nBrightID is a social identity network that allows you to prove that you’re only using one account\nPlease refer to the BrightID Docs for more details.\nIntegration\nQuerying Verification\nAPI Request format,\nExample,\nVerifying User\nAPI Request format,\nExample,\nor deeplink using,\nComments\n"
filetype = "PlainText"
[[input.files]]
title = "Home"
url = "/"
contents = "Convo Space\nThe Decentralized Conversation Layer of Internet\nConvo offers all the Tooling and Infrastructure to build Social Platforms that are composable across the web, powered by Web3.\nContinuity through Composability : Convo can be used as a singular layer to manage your conversations throughout the Internet, can be used to build upon and integrated into any application with Convo's API.\nOwn your Data, Always : All your Conversational Data generated on Convo is always in your control and linked to your Decentralized Identity, no other application can modify it without your approval.\nSimple-to-use API, Built on Web3 : The Convo Space is intended to be fully decentralized, utilizing Textile's ThreadDB built on IPFS and Libp2p for Storage ensuring that your data lives independent of the interface.\nUse Cases\nThe Convo Space is the Decentralized Conversation Layer of Internet offering all the tooling and infrastucture to build Social Platforms around any element of the web, powered by Web3.\nHere are some of the use cases that Convo enables,\nAdd a conversation layer to your platform to allow the community to interact, without worrying about the Complexities of Web3.\nComposable conversations across multiple interfaces. You can anchor one or many conversations to an NFT so that whichever Marketplace/Platform that NFT is viewed on the Community around that NFT can move along with it.\nCommenting on a specific transaction on Etherscan warning users of a malicious account/contract and having those conversations show up in your wallet so that the next time you are sending a txn to that address you can see the entire community warning you against it.\nConversations around a Proposal are happening across a multitude of interfaces, with Convo you can build a plugin of Snapshot or any Governance Interface and continue those conversations anywhere.\nConvo's Identity and Reputation Layer makes it simple to move your Reputation across different interfaces, like a Prominent Artist who has sold multiple pieces can join a DAO and automatically unlock perks based on their sales and other on-chain activity.\nand many more...\nSupport\n✉️ Need dedicated support for your project?\nPlease reach out to me or our community if you run into any issues.\nDiscord\nGitHub\nTwitter\nContributions\nWanna look under the hood? Here are the family of repositories that run Convo.\nhttps://github.com/anudit/convo/ - Convo's Protocol and App\nhttps://github.com/anudit/convodocs/ - Convo's Documentation\nhttps://github.com/anudit/convosdk/ - Convo's SDK\nhttps://github.com/anudit/convobridge/ - Convo's Web2 to Web3 Bridge\nhttps://github.com/anudit/convocontracts/ - Convo's Omnid Solidity Smart Contracts\nhttps://github.com/anudit/convoblog/ - Convo's Blog Server\nhttps://github.com/anudit/convoimage/ - Convo's OpenGraph Image Generator\nhttps://github.com/anudit/convoextension/ - Convo's Browser Extension\nhttps://github.com/anudit/convodecentraland/ - Convo's Decentraland Extension\nhttps://github.com/anudit/convodesign/ - Convo's Design System\n"
filetype = "PlainText"
[[input.files]]
title = "Read More"
url = "/learn/read-about-convo"
contents = "Read More about Convo.\n"
filetype = "PlainText"
[[input.files]]
title = "Web2 <> Web3 Bridge"
url = "/docs/Convo-Bridge/bridge"
contents = "Convo Bridge 🌉\nBridge maps Web2 Social accounts to your Ethereum Identity enabling Web2 to Web3 Interoperability of Conversational Experiences.\nSupported Integrations.\nTelegram : @Convospacebot\nDiscord : Convo#4785\nZoom : App\nSlack: Soon\nSpotify: Soon\nTwitch: Soon\nmany more coming soon...\nExplore the Bridge 👉 bridge.theconvo.space\n"
filetype = "PlainText"
[output]
filename = "/workspaces/testdocs/public/index-en-US.st"
excerpts_per_result = 1
